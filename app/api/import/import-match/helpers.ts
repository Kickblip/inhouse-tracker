import { Match, ParticipantPerformanceFull } from "@/types/Match"

const get = <T>(p: any, key: string, fallback: T): T => (p as any)[key] ?? p.challenges?.[key] ?? fallback

export function toParticipant(p: any): ParticipantPerformanceFull {
  return {
    puuid: p.puuid,
    participantId: p.participantId,
    summonerId: p.summonerId,
    summonerLevel: p.summonerLevel,
    teamId: p.teamId,
    win: p.win,
    riotIdGameName: p.riotIdGameName,
    riotIdTagline: p.riotIdTagline,
    individualPosition: p.individualPosition,
    role: p.role,
    lane: p.lane,
    teamPosition: p.teamPosition,
    championName: p.championName,
    championLevel: p.championLevel,
    championId: p.championId,
    totalMinionsKilled: p.totalMinionsKilled,
    goldEarned: p.goldEarned,
    goldPerMinute: p.challenges.goldPerMinute,
    kills: p.kills,
    deaths: p.deaths,
    assists: p.assists,
    kda: p.kda,
    killParticipation: p.challenges.killParticipation,
    totalDamageDealtToChampions: p.totalDamageDealtToChampions,
    visionScore: p.visionScore,
    pings: {
      basicPings: p.basicPings,
      assistMePings: p.assistMePings,
      allInPings: p.allInPings,
      commandPings: p.commandPings,
      dangerPings: p.dangerPings,
      enemyMissingPings: p.enemyMissingPings,
      enemyVisionPings: p.enemyVisionPings,
      getBackPings: p.getBackPings,
      holdPings: p.holdPings,
      needVisionPings: p.needVisionPings,
      onMyWayPings: p.onMyWayPings,
      pushPings: p.pushPings,
      retreatPings: p.retreatPings,
      visionClearedPings: p.visionClearedPings,
    },
    fun: {
      abilityUses: p.challenges.abilityUses,
      blastConeOppositeOpponentCount: p.challenges.blastConeOppositeOpponentCount,
      dancedWithRiftHerald: p.challenges.dancedWithRiftHerald,
      fistBumpParticipation: p.challenges.fistBumpParticipation,
      mejaisFullStackInTime: p.challenges.mejaisFullStackInTime,
      largestCriticalStrike: p.largestCriticalStrike,
      totalTimeSpentDead: p.totalTimeSpentDead,
      spell1Casts: p.spell1Casts,
      spell2Casts: p.spell2Casts,
      spell3Casts: p.spell3Casts,
      spell4Casts: p.spell4Casts,
      summoner1Casts: p.summoner1Casts,
      summoner1Id: p.summoner1Id,
      summoner2Casts: p.summoner2Casts,
      summoner2Id: p.summoner2Id,
      longestTimeSpentLiving: p.longestTimeSpentLiving,
      buffsStolen: p.challenges.buffsStolen,
      controlWardsPlaced: p.challenges.controlWardsPlaced,
      skillshotsDodged: p.challenges.skillshotsDodged,
      skillshotsHit: p.challenges.skillshotsHit,
      takedownsInEnemyFountain: p.challenges.takedownsInEnemyFountain,
      consumablesPurchased: p.consumablesPurchased,
      survivedSingleDigitHpCount: p.challenges.survivedSingleDigitHpCount,
      dodgeSkillShotsSmallWindow: p.challenges.dodgeSkillShotsSmallWindow,
      timeCCingOthers: p.timeCCingOthers,
    },
    laning: {
      laneMinionsFirst10Minutes: get(p, "laneMinionsFirst10Minutes", 0),
      firstBloodAssist: p.firstBloodAssist ?? false,
      firstBloodKill: p.firstBloodKill ?? false,
      firstTowerAssist: p.firstTowerAssist ?? false,
      firstTowerKill: p.firstTowerKill ?? false,
      unseenRecalls: get(p, "unseenRecalls", 0),
      firstTurretKilled: get(p, "firstTurretKilled", 0),
      earlyLaningPhaseGoldExpAdvantage: get(p, "earlyLaningPhaseGoldExpAdvantage", 0),
      laningPhaseGoldExpAdvantage: get(p, "laningPhaseGoldExpAdvantage", 0),
      landSkillShotsEarlyGame: get(p, "landSkillShotsEarlyGame", 0),
      maxKillDeficit: get(p, "maxKillDeficit", 0),
      maxLevelLeadLaneOpponent: get(p, "maxLevelLeadLaneOpponent", 0),
      maxCsAdvantageOnLaneOpponent: get(p, "maxCsAdvantageOnLaneOpponent", 0),
      takedownsAfterGainingLevelAdvantage: get(p, "takedownsAfterGainingLevelAdvantage", 0),
      killsNearEnemyTurret: get(p, "killsNearEnemyTurret", 0),
      killsUnderOwnTurret: get(p, "killsUnderOwnTurret", 0),
    },
    utility: {
      visionScore: p.visionScore,
      visionWardsBoughtInGame: p.visionWardsBoughtInGame,
      wardsPlaced: p.wardsPlaced,
      wardTakedowns: get(p, "wardTakedowns", 0),
      wardsKilled: p.wardsKilled,
      wardTakedownsBefore20M: get(p, "wardTakedownsBefore20M", 0),
      wardsGuarded: get(p, "wardsGuarded", 0),
      visionScoreAdvantageLaneOpponent: get(p, "visionScoreAdvantageLaneOpponent", 0),
      visionScorePerMinute: get(p, "visionScorePerMinute", 0),
      twoWardsOneSweeperCount: get(p, "twoWardsOneSweeperCount", 0),
      detectorWardsPlaced: p.detectorWardsPlaced,
      highestWardKills: get(p, "highestWardKills", 0),
      stealthWardsPlaced: p.stealthWardsPlaced,
      knockEnemyIntoTeamAndKill: get(p, "knockEnemyIntoTeamAndKill", 0),
      totalHeal: p.totalHeal,
      totalHealsOnTeammates: p.totalHealsOnTeammates ?? 0,
      saveAllyFromDeath: get(p, "saveAllyFromDeath", 0),
      enemyChampionImmobilizations: p.enemyChampionImmobilizations,
      effectiveHealAndShielding: get(p, "effectiveHealAndShielding", 0),
    },
    jungling: {
      killsOnLanersEarlyJungleAsJungler: get(p, "killsOnLanersEarlyJungleAsJungler", 0),
      jungleCsBefore10Minutes: get(p, "jungleCsBefore10Minutes", 0),
      junglerKillsEarlyJungle: get(p, "junglerKillsEarlyJungle", 0),
      damageDealtToObjectives: p.damageDealtToObjectives,
      totalAllyJungleMinionsKilled: p.totalAllyJungleMinionsKilled,
      totalEnemyJungleMinionsKilled: p.totalEnemyJungleMinionsKilled,
      neutralMinionsKilled: p.neutralMinionsKilled,
      baronKills: p.baronKills,
      baronTakedowns: get(p, "baronTakedowns", 0),
      teamBaronKills: get(p, "teamBaronKills", 0),
      riftHeraldTakedowns: get(p, "riftHeraldTakedowns", 0),
      scuttleCrabKills: get(p, "scuttleCrabKills", 0),
      dragonKills: p.dragonKills,
      dragonTakedowns: get(p, "dragonTakedowns", 0),
      perfectDragonSoulsTaken: get(p, "perfectDragonSoulsTaken", 0),
      objectivesStolen: get(p, "objectivesStolen", 0),
      objectivesStolenAssists: get(p, "objectivesStolenAssists", 0),
      epicMonsterKillsNearEnemyJungler: get(p, "epicMonsterKillsNearEnemyJungler", 0),
      epicMonsterKillsWithin30SecondsOfSpawn: get(p, "epicMonsterKillsWithin30SecondsOfSpawn", 0),
      epicMonsterSteals: get(p, "epicMonsterSteals", 0),
      epicMonsterStolenWithoutSmite: get(p, "epicMonsterStolenWithoutSmite", 0),
      initialBuffCount: get(p, "initialBuffCount", 0),
      initialCrabCount: get(p, "initialCrabCount", 0),
      teamElderDragonKills: get(p, "teamElderDragonKills", 0),
      teamRiftHeraldKills: get(p, "teamRiftHeraldKills", 0),
      soloBaronKills: get(p, "soloBaronKills", 0),
      elderDragonKillsWithOpposingSoul: get(p, "elderDragonKillsWithOpposingSoul", 0),
      earliestDragonTakedown: get(p, "earliestDragonTakedown", 0),
      takedownsBeforeJungleMinionSpawn: get(p, "takedownsBeforeJungleMinionSpawn", 0),
    },
    combat: {
      killAfterHiddenWithAlly: get(p, "killAfterHiddenWithAlly", 0),
      outnumberedKills: get(p, "outnumberedKills", 0),
      soloKills: p.soloKills,
      doubleKills: p.doubleKills,
      tripleKills: p.tripleKills,
      quadraKills: p.quadraKills,
      pentaKills: p.pentaKills,
      largestKillingSpree: p.largestKillingSpree,
      largestMultiKill: p.largestMultiKill,
      acesBefore15Minutes: get(p, "acesBefore15Minutes", 0),
    },
    structures: {
      damageDealtToTurrets: p.damageDealtToTurrets,
      turretKills: p.turretKills,
      turretTakedowns: get(p, "turretTakedowns", 0),
      turretsLost: p.turretsLost,
      inhibitorKills: p.inhibitorKills,
      inhibitorTakedowns: get(p, "inhibitorTakedowns", 0),
      inhibitorsLost: p.inhibitorsLost,
      turretPlatesTaken: get(p, "turretPlatesTaken", 0),
      turretsTakenWithRiftHerald: get(p, "turretsTakenWithRiftHerald", 0),
    },
    damage: {
      damagePerMinute: get(p, "damagePerMinute", 0),
      magicDamageDealt: p.magicDamageDealt,
      magicDamageDealtToChampions: p.magicDamageDealtToChampions,
      magicDamageTaken: p.magicDamageTaken,
      physicalDamageDealt: p.physicalDamageDealt,
      physicalDamageDealtToChampions: p.physicalDamageDealtToChampions,
      physicalDamageTaken: p.physicalDamageTaken,
      trueDamageDealt: p.trueDamageDealt,
      trueDamageDealtToChampions: p.trueDamageDealtToChampions,
      trueDamageTaken: p.trueDamageTaken,
      totalDamageDealt: p.totalDamageDealt,
      totalDamageDealtToChampions: p.totalDamageDealtToChampions,
      totalDamageShieldedOnTeammates: p.totalDamageShieldedOnTeammates,
      totalDamageTaken: p.totalDamageTaken,
      teamDamagePercentage: get(p, "teamDamagePercentage", 0),
      damageSelfMitigated: p.damageSelfMitigated,
    },
  }
}

export function toMatch(raw: any): Match {
  const { metadata, info } = raw

  const participants = info.participants.map((p: any) => toParticipant(p))

  return {
    dataVersion: metadata.dataVersion,
    gameEndedInEarlySurrender: info.participants[0].gameEndedInEarlySurrender,
    gameEndedInSurrender: info.participants[0].gameEndedInSurrender,
    gameMode: info.gameMode,
    gameName: info.gameName,
    gameType: info.gameType,
    gameVersion: info.gameVersion,
    matchId: metadata.matchId,
    participants,
    perfectGame: info.participants[0].perfectGame,
    timestamps: {
      gameCreation: info.gameCreation,
      gameDuration: info.gameDuration,
      gameStartTimestamp: info.gameStartTimestamp,
      gameEndTimestamp: info.gameEndTimestamp,
    },
  }
}

export async function fetchWithRetry(url: string, opts: RequestInit, retries = 3) {
  for (let i = 0; i < retries; i++) {
    const res = await fetch(url, opts)
    if (res.status !== 429) return res // success or other error

    // 429 â€“ read how long to wait (falls back to 1 s)
    const sleep = Number(res.headers.get("retry-after") ?? "1") * 1_000
    await new Promise((r) => setTimeout(r, sleep))
  }
  throw new Error("Exceeded retry budget (429)")
}
